!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	D:/42/Art/Programs/C++/New/VulkanTriangle/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Fence	./VulkanWrappers/Fence.cpp	/^Fence::Fence(Fence&& rhs) :$/;"	f	class:Fence
Fence	./VulkanWrappers/Fence.cpp	/^Fence::Fence(VkDevice device, const VkFenceCreateInfo& createInfo)$/;"	f	class:Fence
Fence	./VulkanWrappers/Fence.h	/^class Fence$/;"	c
Fence	VulkanWrappers/Fence.cpp	/^Fence::Fence(Fence&& rhs) :$/;"	f	class:Fence
Fence	VulkanWrappers/Fence.cpp	/^Fence::Fence(VkDevice device, const VkFenceCreateInfo& createInfo)$/;"	f	class:Fence
GLFW_INCLUDE_VULKAN	./GLFWwrappers/VulkanWithGLFW.h	/^#define GLFW_INCLUDE_VULKAN$/;"	d
GLFWmanager	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager::GLFWmanager()$/;"	f	class:GLFWmanager
GLFWmanager	./GLFWwrappers/GLFWmanager.h	/^class GLFWmanager$/;"	c
GLFWwrappers	./GLFWwrappers/CMakeLists.txt	/^add_library(GLFWwrappers GLFWmanager.cpp Window.cpp)$/;"	t
ImageView	VulkanWrappers/ImageView.cpp	/^ImageView::ImageView(ImageView&& rhs) :$/;"	f	class:ImageView
ImageView	VulkanWrappers/ImageView.cpp	/^ImageView::ImageView(ImageView&& rhs)$/;"	f	class:ImageView
ImageView	VulkanWrappers/ImageView.cpp	/^ImageView::ImageView(VkDevice device, const VkImageViewCreateInfo& createInfo)$/;"	f	class:ImageView
ImageView	VulkanWrappers/ImageView.h	/^class ImageView$/;"	c
Instance	./VulkanWrappers/Instance.cpp	/^Instance::Instance(Instance&& rhs) :$/;"	f	class:Instance
Instance	./VulkanWrappers/Instance.cpp	/^Instance::Instance(const VkInstanceCreateInfo& createInfo)$/;"	f	class:Instance
Instance	./VulkanWrappers/Instance.h	/^class Instance$/;"	c
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice() :$/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice(LogicalDevice&& rhs) :$/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo& createIn/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.h	/^class LogicalDevice$/;"	c
QueueFamily	./VulkanWrappers/LogicalDevice.h	/^struct QueueFamily$/;"	s
RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(RenderPass&& rhs) :$/;"	f	class:RenderPass
RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(VkDevice device, const VkRenderPassCreateInfo& createInfo)$/;"	f	class:RenderPass
RenderPass	./VulkanWrappers/RenderPass.h	/^class RenderPass$/;"	c
RenderPass	VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(RenderPass&& rhs) :$/;"	f	class:RenderPass
RenderPass	VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(VkDevice device, const VkRenderPassCreateInfo& createInfo)$/;"	f	class:RenderPass
Rendering	./Rendering/CMakeLists.txt	/^add_library(Rendering InstanceHelpers.cpp)$/;"	t
RenderingDevice	./Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(RenderingDevice&& rhs) :$/;"	f	class:RenderingDevice
RenderingDevice	./Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(VkInstance instance)$/;"	f	class:RenderingDevice
RenderingDevice	./Rendering/RenderingDevice.h	/^class RenderingDevice : public LogicalDevice$/;"	c
RenderingDevice	Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(RenderingDevice&& rhs) :$/;"	f	class:RenderingDevice
RenderingDevice	Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(VkInstance instance)$/;"	f	class:RenderingDevice
RenderingDevice	Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(VkInstance instance, VkSurfaceKHR surface)$/;"	f	class:RenderingDevice
RenderingDevice	Rendering/RenderingDevice.h	/^class RenderingDevice : public LogicalDevice$/;"	c
Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(Semaphore&& rhs) :$/;"	f	class:Semaphore
Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(VkDevice device, const VkSemaphoreCreateInfo& createInfo) :$/;"	f	class:Semaphore
Semaphore	./VulkanWrappers/Semaphore.h	/^class Semaphore$/;"	c
Semaphore	VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(Semaphore&& rhs) :$/;"	f	class:Semaphore
Semaphore	VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(VkDevice device, const VkSemaphoreCreateInfo& createInfo) :$/;"	f	class:Semaphore
Utility	./Utility/CMakeLists.txt	/^add_library(Utility Utility.cpp)$/;"	t
VK_CHECK	./GLFWwrappers/VulkanWithGLFW.h	/^#define VK_CHECK(/;"	d
VulkanTriangle	./CMakeLists.txt	/^project(VulkanTriangle)$/;"	p
VulkanWrappers	./VulkanWrappers/CMakeLists.txt	/^add_library(VulkanWrappers Instance.cpp)$/;"	t
Window	./GLFWwrappers/Window.cpp	/^Window::Window()$/;"	f	class:Window
Window	./GLFWwrappers/Window.h	/^class Window$/;"	c
__anonb35aecf60102	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkLayerProperties>([](uint32_t* count, VkLayerProperties* elements) {$/;"	f	function:enumerateInstanceLayerProperties	file:
__anonb35aecf60202	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([pLayerName](uint32_t* count, VkExtensionProperties* elem/;"	f	function:enumerateInstanceExtensionProperties	file:
__anonb35aecf60302	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkPhysicalDevice>([instance](uint32_t* count, VkPhysicalDevice* elements) {$/;"	f	function:enumeratePhysicalDevices	file:
__anonb35aecf60402	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkQueueFamilyProperties>([physicalDevice](uint32_t* count, VkQueueFamilyProperti/;"	f	function:getPhysicalDeviceQueueFamilyProperties	file:
__anonb35aecf60502	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([physicalDevice, pLayerName](uint32_t* count, VkExtension/;"	f	function:enumerateDeviceExtensionProperties	file:
__anonb35aecf60602	VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkSurfaceFormatKHR>([physicalDevice, surface](uint32_t* count, VkSurfaceFormatKH/;"	f	function:getPhysicalDeviceSurfaceFormatsKHR	file:
__anone99712860102	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkLayerProperties>([](uint32_t* count, VkLayerProperties* elements) {$/;"	f	function:enumerateInstanceLayerProperties	file:
__anone99712860202	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([pLayerName](uint32_t* count, VkExtensionProperties* elem/;"	f	function:enumerateInstanceExtensionProperties	file:
__anone99712860302	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkPhysicalDevice>([instance](uint32_t* count, VkPhysicalDevice* elements) {$/;"	f	function:enumeratePhysicalDevices	file:
__anone99712860402	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkQueueFamilyProperties>([physicalDevice](uint32_t* count, VkQueueFamilyProperti/;"	f	function:getPhysicalDeviceQueueFamilyProperties	file:
__anone99712860502	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([physicalDevice, pLayerName](uint32_t* count, VkExtension/;"	f	function:enumerateDeviceExtensionProperties	file:
areExtensionsSupported	./Rendering/InstanceHelpers.cpp	/^bool areExtensionsSupported(const std::vector<const char*>& extensions)$/;"	f	typeref:typename:bool
areLayersSupported	./Rendering/InstanceHelpers.cpp	/^bool areLayersSupported(const std::vector<const char*>& layers)$/;"	f	typeref:typename:bool
checkVkResult	./GLFWwrappers/VulkanWithGLFW.h	/^inline void checkVkResult(VkResult result, const char* filename, int lineNumber)$/;"	f	typeref:typename:void
createBinarySemaphore	./Rendering/SynchronizationHelpers.cpp	/^Semaphore createBinarySemaphore(VkDevice device)$/;"	f	typeref:typename:Semaphore
createFence	./Rendering/SynchronizationHelpers.cpp	/^Fence createFence(VkDevice device)$/;"	f	typeref:typename:Fence
createRenderingImageView	Rendering/ImageViewHelpers.cpp	/^ImageView createRenderingImageView(VkDevice device, VkImage image)$/;"	f	typeref:typename:ImageView
createRenderingInstance	./Rendering/InstanceHelpers.cpp	/^Instance createRenderingInstance()$/;"	f	typeref:typename:Instance
createRenderingRenderPass	./Rendering/RenderPassHelpers.cpp	/^RenderPass createRenderingRenderPass(VkDevice device)$/;"	f	typeref:typename:RenderPass
createRenderingRenderPass	Rendering/RenderPassHelpers.cpp	/^RenderPass createRenderingRenderPass(VkDevice device)$/;"	f	typeref:typename:RenderPass
defaultQueuePriority	./Rendering/RenderingDevice.cpp	/^const float defaultQueuePriority = 1.0f;$/;"	v	typeref:typename:const float
defaultQueuePriority	Rendering/RenderingDevice.cpp	/^const float defaultQueuePriority = 1.0f;$/;"	v	typeref:typename:const float
device	./VulkanWrappers/Fence.h	/^    VkDevice device;$/;"	m	class:Fence	typeref:typename:VkDevice
device	./VulkanWrappers/RenderPass.h	/^    VkDevice device;$/;"	m	class:RenderPass	typeref:typename:VkDevice
device	./VulkanWrappers/Semaphore.h	/^    VkDevice device;$/;"	m	class:Semaphore	typeref:typename:VkDevice
device	VulkanWrappers/ImageView.h	/^    VkDevice device;$/;"	m	class:ImageView	typeref:typename:VkDevice
doesPhysicalDeviceSupportExtensions	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportExtensions($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportExtensions	Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportExtensions($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportFeatures	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportFeatures($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportFeatures	Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportFeatures($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportRequiredQueueCapabilities	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportRequiredQueueCapabilities(VkInstance instance, VkPhysicalDevice ph/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportRequiredQueueCapabilities	Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportRequiredQueueCapabilities(VkInstance instance, VkPhysicalDevice ph/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportRequiredSurfaceFormats	Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportRequiredSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurfaceK/;"	f	typeref:typename:bool
enumerateArray	./VulkanWrappers/EnumerationHelpers.h	/^std::vector<T> enumerateArray(std::function<VkResult(uint32_t*, T*)> enumerator)$/;"	f	typeref:typename:std::vector<T>
enumerateArray	VulkanWrappers/EnumerationHelpers.h	/^std::vector<T> enumerateArray(std::function<VkResult(uint32_t*, T*)> enumerator)$/;"	f	typeref:typename:std::vector<T>
enumerateDeviceExtensionProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateDeviceExtensionProperties($/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateDeviceExtensionProperties	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateDeviceExtensionProperties($/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateInstanceExtensionProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateInstanceExtensionProperties(const char* pLaye/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateInstanceExtensionProperties	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateInstanceExtensionProperties(const char* pLaye/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateInstanceLayerProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkLayerProperties> enumerateInstanceLayerProperties()$/;"	f	typeref:typename:std::vector<VkLayerProperties>
enumerateInstanceLayerProperties	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkLayerProperties> enumerateInstanceLayerProperties()$/;"	f	typeref:typename:std::vector<VkLayerProperties>
enumeratePhysicalDevices	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkPhysicalDevice> enumeratePhysicalDevices(VkInstance instance)$/;"	f	typeref:typename:std::vector<VkPhysicalDevice>
enumeratePhysicalDevices	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkPhysicalDevice> enumeratePhysicalDevices(VkInstance instance)$/;"	f	typeref:typename:std::vector<VkPhysicalDevice>
findPhysicalDevice	./Rendering/RenderingDevice.cpp	/^VkPhysicalDevice findPhysicalDevice(VkInstance instance)$/;"	f	typeref:typename:VkPhysicalDevice
findPhysicalDevice	Rendering/RenderingDevice.cpp	/^VkPhysicalDevice findPhysicalDevice(VkInstance instance)$/;"	f	typeref:typename:VkPhysicalDevice
findPhysicalDevice	Rendering/RenderingDevice.cpp	/^VkPhysicalDevice findPhysicalDevice(VkInstance instance, VkSurfaceKHR surface)$/;"	f	typeref:typename:VkPhysicalDevice
getApplicationInfo	./Rendering/InstanceHelpers.cpp	/^VkApplicationInfo getApplicationInfo()$/;"	f	typeref:typename:VkApplicationInfo
getAttachmentDescriptions	./Rendering/RenderPassHelpers.cpp	/^std::vector<VkAttachmentDescription> getAttachmentDescriptions()$/;"	f	typeref:typename:std::vector<VkAttachmentDescription>
getAttachmentDescriptions	Rendering/RenderPassHelpers.cpp	/^std::vector<VkAttachmentDescription> getAttachmentDescriptions()$/;"	f	typeref:typename:std::vector<VkAttachmentDescription>
getGraphicsQueue	./Rendering/RenderingDevice.cpp	/^VkQueue RenderingDevice::getGraphicsQueue()$/;"	f	class:RenderingDevice	typeref:typename:VkQueue
getGraphicsQueue	Rendering/RenderingDevice.cpp	/^VkQueue RenderingDevice::getGraphicsQueue()$/;"	f	class:RenderingDevice	typeref:typename:VkQueue
getHandle	./GLFWwrappers/Window.cpp	/^GLFWwindow* Window::getHandle()$/;"	f	class:Window	typeref:typename:GLFWwindow *
getHandle	./VulkanWrappers/Fence.cpp	/^VkFence Fence::getHandle()$/;"	f	class:Fence	typeref:typename:VkFence
getHandle	./VulkanWrappers/Instance.cpp	/^VkInstance Instance::getHandle()$/;"	f	class:Instance	typeref:typename:VkInstance
getHandle	./VulkanWrappers/LogicalDevice.cpp	/^VkDevice LogicalDevice::getHandle()$/;"	f	class:LogicalDevice	typeref:typename:VkDevice
getHandle	./VulkanWrappers/RenderPass.cpp	/^VkRenderPass RenderPass::getHandle()$/;"	f	class:RenderPass	typeref:typename:VkRenderPass
getHandle	./VulkanWrappers/Semaphore.cpp	/^VkSemaphore Semaphore::getHandle()$/;"	f	class:Semaphore	typeref:typename:VkSemaphore
getHandle	VulkanWrappers/Fence.cpp	/^VkFence Fence::getHandle()$/;"	f	class:Fence	typeref:typename:VkFence
getHandle	VulkanWrappers/ImageView.cpp	/^VkImageView ImageView::getHandle()$/;"	f	class:ImageView	typeref:typename:VkImageView
getHandle	VulkanWrappers/RenderPass.cpp	/^VkRenderPass RenderPass::getHandle()$/;"	f	class:RenderPass	typeref:typename:VkRenderPass
getHandle	VulkanWrappers/Semaphore.cpp	/^VkSemaphore Semaphore::getHandle()$/;"	f	class:Semaphore	typeref:typename:VkSemaphore
getPhysicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^VkPhysicalDevice LogicalDevice::getPhysicalDevice()$/;"	f	class:LogicalDevice	typeref:typename:VkPhysicalDevice
getPhysicalDeviceQueueFamilyProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkQueueFamilyProperties> getPhysicalDeviceQueueFamilyProperties(VkPhysicalDev/;"	f	typeref:typename:std::vector<VkQueueFamilyProperties>
getPhysicalDeviceQueueFamilyProperties	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkQueueFamilyProperties> getPhysicalDeviceQueueFamilyProperties(VkPhysicalDev/;"	f	typeref:typename:std::vector<VkQueueFamilyProperties>
getPhysicalDeviceSurfaceFormatsKHR	VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkSurfaceFormatKHR> getPhysicalDeviceSurfaceFormatsKHR($/;"	f	typeref:typename:std::vector<VkSurfaceFormatKHR>
getPresentQueue	./Rendering/RenderingDevice.cpp	/^VkQueue RenderingDevice::getPresentQueue()$/;"	f	class:RenderingDevice	typeref:typename:VkQueue
getPresentQueue	Rendering/RenderingDevice.cpp	/^VkQueue RenderingDevice::getPresentQueue()$/;"	f	class:RenderingDevice	typeref:typename:VkQueue
getQueueCreateInfos	./Rendering/RenderingDevice.cpp	/^std::vector<VkDeviceQueueCreateInfo> getQueueCreateInfos(VkInstance instance, VkPhysicalDevice p/;"	f	typeref:typename:std::vector<VkDeviceQueueCreateInfo>
getQueueCreateInfos	Rendering/RenderingDevice.cpp	/^std::vector<VkDeviceQueueCreateInfo> getQueueCreateInfos(VkInstance instance, VkPhysicalDevice p/;"	f	typeref:typename:std::vector<VkDeviceQueueCreateInfo>
getQueueFamily	./VulkanWrappers/LogicalDevice.cpp	/^const QueueFamily& LogicalDevice::getQueueFamily(size_t index)$/;"	f	class:LogicalDevice	typeref:typename:const QueueFamily &
getQueueFamilyCount	./VulkanWrappers/LogicalDevice.cpp	/^size_t LogicalDevice::getQueueFamilyCount()$/;"	f	class:LogicalDevice	typeref:typename:size_t
getQueueHandles	./VulkanWrappers/LogicalDevice.cpp	/^std::vector<QueueFamily> getQueueHandles(VkDevice device, const VkDeviceCreateInfo& createInfo)$/;"	f	typeref:typename:std::vector<QueueFamily>
getRequiredDeviceExtensions	./Rendering/RenderingDevice.cpp	/^std::vector<const char*> getRequiredDeviceExtensions()$/;"	f	typeref:typename:std::vector<const char * >
getRequiredDeviceExtensions	Rendering/RenderingDevice.cpp	/^std::vector<const char*> getRequiredDeviceExtensions()$/;"	f	typeref:typename:std::vector<const char * >
getRequiredExtensions	./Rendering/InstanceHelpers.cpp	/^std::vector<const char*> getRequiredExtensions()$/;"	f	typeref:typename:std::vector<const char * >
getRequiredFeatures	./Rendering/RenderingDevice.cpp	/^VkPhysicalDeviceFeatures getRequiredFeatures()$/;"	f	typeref:typename:VkPhysicalDeviceFeatures
getRequiredFeatures	Rendering/RenderingDevice.cpp	/^VkPhysicalDeviceFeatures getRequiredFeatures()$/;"	f	typeref:typename:VkPhysicalDeviceFeatures
getRequiredLayers	./Rendering/InstanceHelpers.cpp	/^std::vector<const char*> getRequiredLayers()$/;"	f	typeref:typename:std::vector<const char * >
getSubpassDescriptions	Rendering/RenderPassHelpers.cpp	/^std::vector<VkSubpassDescription> getSubpassDescriptions()$/;"	f	typeref:typename:std::vector<VkSubpassDescription>
glfwErrorCallback	./GLFWwrappers/GLFWmanager.cpp	/^void glfwErrorCallback(int errorCode, const char* description)$/;"	f	typeref:typename:void
graphicsFamilyIndex	./Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
graphicsFamilyIndex	Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
handle	./VulkanWrappers/Fence.h	/^    VkFence handle;$/;"	m	class:Fence	typeref:typename:VkFence
handle	./VulkanWrappers/Instance.h	/^    VkInstance handle;$/;"	m	class:Instance	typeref:typename:VkInstance
handle	./VulkanWrappers/LogicalDevice.h	/^    VkDevice handle;$/;"	m	class:LogicalDevice	typeref:typename:VkDevice
handle	./VulkanWrappers/RenderPass.h	/^    VkRenderPass handle;$/;"	m	class:RenderPass	typeref:typename:VkRenderPass
handle	./VulkanWrappers/Semaphore.h	/^    VkSemaphore handle;$/;"	m	class:Semaphore	typeref:typename:VkSemaphore
handle	VulkanWrappers/ImageView.h	/^    VkImageView handle;$/;"	m	class:ImageView	typeref:typename:VkImageView
initVulkanAndGLFW	./GLFWwrappers/GLFWmanager.cpp	/^void GLFWmanager::initVulkanAndGLFW()$/;"	f	class:GLFWmanager	typeref:typename:void
instance	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager* GLFWmanager::instance = nullptr;$/;"	m	class:GLFWmanager	typeref:typename:GLFWmanager *
instance	./GLFWwrappers/GLFWmanager.h	/^    static GLFWmanager* instance;$/;"	m	class:GLFWmanager	typeref:typename:GLFWmanager *
isASubsetOfB	./Utility/Utility.cpp	/^bool isASubsetOfB(const std::vector<const char*>& A, const std::vector<const char*>& B)$/;"	f	typeref:typename:bool
isPhysicalDeviceSuitable	./Rendering/RenderingDevice.cpp	/^bool isPhysicalDeviceSuitable(VkInstance instance, VkPhysicalDevice physicalDevice)$/;"	f	typeref:typename:bool
isPhysicalDeviceSuitable	Rendering/RenderingDevice.cpp	/^bool isPhysicalDeviceSuitable(VkInstance instance, VkPhysicalDevice physicalDevice)$/;"	f	typeref:typename:bool
isPhysicalDeviceSuitable	Rendering/RenderingDevice.cpp	/^bool isPhysicalDeviceSuitable(VkInstance instance, VkPhysicalDevice physicalDevice, VkSurfaceKHR/;"	f	typeref:typename:bool
main	./main.cpp	/^int main()$/;"	f	typeref:typename:int
operator =	./Rendering/RenderingDevice.cpp	/^RenderingDevice& RenderingDevice::operator=(RenderingDevice&& rhs)$/;"	f	class:RenderingDevice	typeref:typename:RenderingDevice &
operator =	./VulkanWrappers/Fence.cpp	/^Fence& Fence::operator=(Fence&& rhs)$/;"	f	class:Fence	typeref:typename:Fence &
operator =	./VulkanWrappers/Instance.cpp	/^Instance& Instance::operator=(Instance&& rhs)$/;"	f	class:Instance	typeref:typename:Instance &
operator =	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice& LogicalDevice::operator=(LogicalDevice&& rhs)$/;"	f	class:LogicalDevice	typeref:typename:LogicalDevice &
operator =	./VulkanWrappers/RenderPass.cpp	/^RenderPass& RenderPass::operator=(RenderPass&& rhs)$/;"	f	class:RenderPass	typeref:typename:RenderPass &
operator =	./VulkanWrappers/Semaphore.cpp	/^Semaphore& Semaphore::operator=(Semaphore&& rhs)$/;"	f	class:Semaphore	typeref:typename:Semaphore &
operator =	Rendering/RenderingDevice.cpp	/^RenderingDevice& RenderingDevice::operator=(RenderingDevice&& rhs)$/;"	f	class:RenderingDevice	typeref:typename:RenderingDevice &
operator =	VulkanWrappers/Fence.cpp	/^Fence& Fence::operator=(Fence&& rhs)$/;"	f	class:Fence	typeref:typename:Fence &
operator =	VulkanWrappers/ImageView.cpp	/^ImageView& ImageView::operator=(ImageView&& rhs)$/;"	f	class:ImageView	typeref:typename:ImageView &
operator =	VulkanWrappers/RenderPass.cpp	/^RenderPass& RenderPass::operator=(RenderPass&& rhs)$/;"	f	class:RenderPass	typeref:typename:RenderPass &
operator =	VulkanWrappers/Semaphore.cpp	/^Semaphore& Semaphore::operator=(Semaphore&& rhs)$/;"	f	class:Semaphore	typeref:typename:Semaphore &
physicalDevice	./VulkanWrappers/LogicalDevice.h	/^    VkPhysicalDevice physicalDevice;$/;"	m	class:LogicalDevice	typeref:typename:VkPhysicalDevice
presentFamilyIndex	./Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
presentFamilyIndex	Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
queueFamilies	./VulkanWrappers/LogicalDevice.h	/^    std::vector<QueueFamily> queueFamilies;$/;"	m	class:LogicalDevice	typeref:typename:std::vector<QueueFamily>
queueFamilyIndex	./VulkanWrappers/LogicalDevice.h	/^    uint32_t queueFamilyIndex;$/;"	m	struct:QueueFamily	typeref:typename:uint32_t
queues	./VulkanWrappers/LogicalDevice.h	/^    std::vector<VkQueue> queues;$/;"	m	struct:QueueFamily	typeref:typename:std::vector<VkQueue>
vulkanTriangle	./CMakeLists.txt	/^add_executable(vulkanTriangle main.cpp)$/;"	t
window	./GLFWwrappers/Window.h	/^    GLFWwindow* window;$/;"	m	class:Window	typeref:typename:GLFWwindow *
~Fence	./VulkanWrappers/Fence.cpp	/^Fence::~Fence()$/;"	f	class:Fence
~Fence	VulkanWrappers/Fence.cpp	/^Fence::~Fence()$/;"	f	class:Fence
~GLFWmanager	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager::~GLFWmanager()$/;"	f	class:GLFWmanager
~ImageView	VulkanWrappers/ImageView.cpp	/^ImageView::~ImageView()$/;"	f	class:ImageView
~Instance	./VulkanWrappers/Instance.cpp	/^Instance::~Instance()$/;"	f	class:Instance
~LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::~LogicalDevice()$/;"	f	class:LogicalDevice
~RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::~RenderPass()$/;"	f	class:RenderPass
~RenderPass	VulkanWrappers/RenderPass.cpp	/^RenderPass::~RenderPass()$/;"	f	class:RenderPass
~Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::~Semaphore()$/;"	f	class:Semaphore
~Semaphore	VulkanWrappers/Semaphore.cpp	/^Semaphore::~Semaphore()$/;"	f	class:Semaphore
~Window	./GLFWwrappers/Window.cpp	/^Window::~Window()$/;"	f	class:Window
